;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;ï¿½ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 19/07/2022
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <math.h>
;#include <stdio.h>
;#include <delay.h>
;
;// Alphanumeric LCD Module functions
;#include <alcd.h>
;
;#define ADC_VREF_TYPE 0x40
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0025 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0026     ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0027 
; 0000 0028     // Delay needed for the stabilization of the ADC input voltage
; 0000 0029     delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 002A 
; 0000 002B     // Start the AD conversion
; 0000 002C     ADCSRA|=0x40;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002D 
; 0000 002E     // Wait for the AD conversion to complete
; 0000 002F     while ((ADCSRA & 0x10)==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0030     ADCSRA|=0x10;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0031 
; 0000 0032     return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0033 }
;PCODE: $00000021 VOL: 0
;
;// Declare your global variables here
;unsigned int adc_value;
;float adc_temp;
;unsigned char buffer[16], i;
;
;void display(char* buffer, float temp) {
; 0000 003A void display(char* buffer, float temp) {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003B     lcd_clear();
;PCODE: $00000024 VOL: 0
;	*buffer -> Y+4
;	temp -> Y+0
;PCODE: $00000025 VOL: 0
; 0000 003C     if ((int) temp > 39) {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003D         lcd_puts("    CANH BAO    ");
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003E 
; 0000 003F     } else {
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0040         lcd_puts("Nhiet do an toan");
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0041     }
;PCODE: $00000032 VOL: 0
; 0000 0042     lcd_gotoxy(0, 1);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0043     lcd_puts(buffer);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0044 }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0

	.DSEG
_0x7:
	.BYTE 0x22
;void main(void)
; 0000 0046 {

	.CSEG
;PCODE: $0000003C VOL: 0
; 0000 0047     // Port A initialization
; 0000 0048     PORTA=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0049     DDRA=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 004A 
; 0000 004B     // Port B initialization
; 0000 004C     PORTB=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 004D     DDRB=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004E 
; 0000 004F     // Port C initialization
; 0000 0050     PORTC=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0051     DDRC=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0052 
; 0000 0053     // Port D initialization
; 0000 0054     PORTD=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0055     DDRD=0x01; // Khoi tao mode output cho portD.0 = 1
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0056 
; 0000 0057     // Timer/Counter 0 initialization
; 0000 0058     // Clock source: System Clock
; 0000 0059     // Clock value: Timer 0 Stopped
; 0000 005A     // Mode: Normal top=0xFF
; 0000 005B     // OC0 output: Disconnected
; 0000 005C     TCCR0=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 005D     TCNT0=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 005E     OCR0=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 005F 
; 0000 0060     // Timer/Counter 1 initialization
; 0000 0061     // Clock source: System Clock
; 0000 0062     // Clock value: Timer1 Stopped
; 0000 0063     // Mode: Normal top=0xFFFF
; 0000 0064     // OC1A output: Discon.
; 0000 0065     // OC1B output: Discon.
; 0000 0066     // Noise Canceler: Off
; 0000 0067     // Input Capture on Falling Edge
; 0000 0068     // Timer1 Overflow Interrupt: Off
; 0000 0069     // Input Capture Interrupt: Off
; 0000 006A     // Compare A Match Interrupt: Off
; 0000 006B     // Compare B Match Interrupt: Off
; 0000 006C     TCCR1A=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 006D     TCCR1B=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 006E     TCNT1H=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 006F     TCNT1L=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0070     ICR1H=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0071     ICR1L=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0072     OCR1AH=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0073     OCR1AL=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0074     OCR1BH=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0075     OCR1BL=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0076 
; 0000 0077     // Timer/Counter 2 initialization
; 0000 0078     // Clock source: System Clock
; 0000 0079     // Clock value: Timer2 Stopped
; 0000 007A     // Mode: Normal top=0xFF
; 0000 007B     // OC2 output: Disconnected
; 0000 007C     ASSR=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 007D     TCCR2=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 007E     TCNT2=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 007F     OCR2=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0080 
; 0000 0081     // External Interrupt(s) initialization
; 0000 0082     // INT0: Off
; 0000 0083     // INT1: Off
; 0000 0084     // INT2: Off
; 0000 0085     MCUCR=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0086     MCUCSR=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0087 
; 0000 0088     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0089     TIMSK=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 008A 
; 0000 008B     // USART initialization
; 0000 008C     // USART disabled
; 0000 008D     UCSRB=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 008E 
; 0000 008F     // Analog Comparator initialization
; 0000 0090     // Analog Comparator: Off
; 0000 0091     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0092     ACSR=0x80;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0093     SFIOR=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0094 
; 0000 0095     // ADC initialization
; 0000 0096     // ADC Clock frequency: 1000.000 kHz
; 0000 0097     // ADC Voltage Reference: AVCC pin
; 0000 0098     // ADC Auto Trigger Source: ADC Stopped
; 0000 0099     ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 009A     ADCSRA=0x84;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 009B 
; 0000 009C     // SPI initialization
; 0000 009D     // SPI disabled
; 0000 009E     SPCR=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 009F 
; 0000 00A0     // TWI initialization
; 0000 00A1     // TWI disabled
; 0000 00A2     TWCR=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00A3 
; 0000 00A4     // Alphanumeric LCD initialization
; 0000 00A5     // Connections specified in the
; 0000 00A6     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00A7     // RS - PORTD Bit 6
; 0000 00A8     // RD - PORTD Bit 5
; 0000 00A9     // EN - PORTD Bit 7
; 0000 00AA     // D4 - PORTC Bit 4
; 0000 00AB     // D5 - PORTC Bit 5
; 0000 00AC     // D6 - PORTC Bit 6
; 0000 00AD     // D7 - PORTC Bit 7
; 0000 00AE     // Characters/line: 16
; 0000 00AF     lcd_init(16);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00B0 
; 0000 00B1     while (1)
;PCODE: $00000085 VOL: 0
; 0000 00B2     {
; 0000 00B3         adc_value = read_adc(0);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00B4         adc_temp = adc_value * 500.0f / 1024;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00B5         sprintf(buffer, "Nhiet do: %d", (int)adc_temp);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00B6         display(buffer, adc_temp);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00B7 
; 0000 00B8         if ((int) adc_temp > 39) {
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00B9             for (i = 0; i < 5; i++) {
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00BA                 PORTD.0 = 1;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00BB                 delay_ms(100);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00BC                 PORTD.0 = 0;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00BD                 delay_ms(100);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00BE             }
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00BF         } else {
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00C0             PORTD.0 = 0;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00C1             delay_ms(1000);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00C2         }
;PCODE: $000000C1 VOL: 0
; 0000 00C3     }
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00C4 }
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0


AVRASM ver. 2.1.30  D:\HUST\Do an 2\codevisionavr\project\Debug\List\project2.asm Tue Jul 19 23:06:32 2022

D:\HUST\Do an 2\codevisionavr\project\Debug\List\project2.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\HUST\Do an 2\codevisionavr\project\Debug\List\project2.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\HUST\Do an 2\codevisionavr\project\Debug\List\project2.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\HUST\Do an 2\codevisionavr\project\Debug\List\project2.asm(1091): warning: Register r6 already defined by the .DEF directive
D:\HUST\Do an 2\codevisionavr\project\Debug\List\project2.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\HUST\Do an 2\codevisionavr\project\Debug\List\project2.asm(1093): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _adc_value=R4
                 	.DEF _adc_value_msb=R5
                 	.DEF _i=R7
                 	.DEF __lcd_x=R6
                 	.DEF __lcd_y=R9
                 	.DEF __lcd_maxx=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 2020
000034 2020
000035 4143
000036 484e      	.DB  0x20,0x20,0x20,0x20,0x43,0x41,0x4E,0x48
000037 4220
000038 4f41
000039 2020
00003a 2020      	.DB  0x20,0x42,0x41,0x4F,0x20,0x20,0x20,0x20
00003b 4e00
00003c 6968
00003d 7465
00003e 6420      	.DB  0x0,0x4E,0x68,0x69,0x65,0x74,0x20,0x64
00003f 206f
000040 6e61
000041 7420
000042 616f      	.DB  0x6F,0x20,0x61,0x6E,0x20,0x74,0x6F,0x61
000043 006e
000044 684e
000045 6569
000046 2074      	.DB  0x6E,0x0,0x4E,0x68,0x69,0x65,0x74,0x20
000047 6f64
000048 203a
000049 6425
D:\HUST\Do an 2\codevisionavr\project\Debug\List\project2.asm(1136): warning: .cseg .db misalignment - padding zero byte
00004a 0000      	.DB  0x64,0x6F,0x3A,0x20,0x25,0x64,0x0
                 _0x2040003:
00004b c080      	.DB  0x80,0xC0
                 _0x2060060:
D:\HUST\Do an 2\codevisionavr\project\Debug\List\project2.asm(1140): warning: .cseg .db misalignment - padding zero byte
00004c 0001      	.DB  0x1
                 _0x2060000:
00004d 4e2d
00004e 4e41
00004f 4900
000050 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\HUST\Do an 2\codevisionavr\project\Debug\List\project2.asm(1143): warning: .cseg .db misalignment - padding zero byte
000051 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000052 0011      	.DW  0x11
000053 0160      	.DW  _0x7
000054 0066      	.DW  _0x0*2
                 
000055 0011      	.DW  0x11
000056 0171      	.DW  _0x7+17
000057 0077      	.DW  _0x0*2+17
                 
000058 0002      	.DW  0x02
000059 0196      	.DW  __base_y_G102
00005a 0096      	.DW  _0x2040003*2
                 
00005b 0001      	.DW  0x01
00005c 019a      	.DW  __seed_G103
00005d 0098      	.DW  _0x2060060*2
                 
                 _0xFFFFFFFF:
00005e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005f 94f8      	CLI
000060 27ee      	CLR  R30
000061 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000062 e0f1      	LDI  R31,1
000063 bffb      	OUT  GICR,R31
000064 bfeb      	OUT  GICR,R30
000065 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000066 e08d      	LDI  R24,(14-2)+1
000067 e0a2      	LDI  R26,2
000068 27bb      	CLR  R27
                 __CLEAR_REG:
000069 93ed      	ST   X+,R30
00006a 958a      	DEC  R24
00006b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006f 93ed      	ST   X+,R30
000070 9701      	SBIW R24,1
000071 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000072 eae4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000073 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000074 9185      	LPM  R24,Z+
000075 9195      	LPM  R25,Z+
000076 9700      	SBIW R24,0
000077 f061      	BREQ __GLOBAL_INI_END
000078 91a5      	LPM  R26,Z+
000079 91b5      	LPM  R27,Z+
00007a 9005      	LPM  R0,Z+
00007b 9015      	LPM  R1,Z+
00007c 01bf      	MOVW R22,R30
00007d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007e 9005      	LPM  R0,Z+
00007f 920d      	ST   X+,R0
000080 9701      	SBIW R24,1
000081 f7e1      	BRNE __GLOBAL_INI_LOOP
000082 01fb      	MOVW R30,R22
000083 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000084 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000085 bfed      	OUT  SPL,R30
000086 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000087 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000088 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000089 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008a 940c 00b7 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 19/07/2022
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <math.h>
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;// Alphanumeric LCD Module functions
                 ;#include <alcd.h>
                 ;
                 ;#define ADC_VREF_TYPE 0x40
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0025 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0026     ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
00008c 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00008d 81e8      	LD   R30,Y
00008e 64e0      	ORI  R30,0x40
00008f b9e7      	OUT  0x7,R30
                 ; 0000 0027 
                 ; 0000 0028     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0029     delay_us(10);
                +
000090 e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
000091 958a     +DEC R24
000092 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ; 0000 002A 
                 ; 0000 002B     // Start the AD conversion
                 ; 0000 002C     ADCSRA|=0x40;
000093 9a36      	SBI  0x6,6
                 ; 0000 002D 
                 ; 0000 002E     // Wait for the AD conversion to complete
                 ; 0000 002F     while ((ADCSRA & 0x10)==0);
                 _0x3:
000094 9b34      	SBIS 0x6,4
000095 cffe      	RJMP _0x3
                 ; 0000 0030     ADCSRA|=0x10;
000096 9a34      	SBI  0x6,4
                 ; 0000 0031 
                 ; 0000 0032     return ADCW;
000097 b1e4      	IN   R30,0x4
000098 b1f5      	IN   R31,0x4+1
000099 940c 0371 	JMP  _0x20C0001
                 ; 0000 0033 }
                 ; .FEND
                 ;
                 ;// Declare your global variables here
                 ;unsigned int adc_value;
                 ;float adc_temp;
                 ;unsigned char buffer[16], i;
                 ;
                 ;void display(char* buffer, float temp) {
                 ; 0000 003A void display(char* buffer, float temp) {
                 _display:
                 ; .FSTART _display
                 ; 0000 003B     lcd_clear();
00009b 940e 0529 	CALL __PUTPARD2
                 ;	*buffer -> Y+4
                 ;	temp -> Y+0
00009d 940e 0313 	CALL _lcd_clear
                 ; 0000 003C     if ((int) temp > 39) {
00009f 940e 051f 	CALL __GETD1S0
0000a1 940e 040a 	CALL __CFD1
0000a3 97b8      	SBIW R30,40
0000a4 f01c      	BRLT _0x6
                 ; 0000 003D         lcd_puts("    CANH BAO    ");
                +
0000a5 e6a0     +LDI R26 , LOW ( _0x7 + ( 0 ) )
0000a6 e0b1     +LDI R27 , HIGH ( _0x7 + ( 0 ) )
                 	__POINTW2MN _0x7,0
0000a7 c002      	RJMP _0x18
                 ; 0000 003E 
                 ; 0000 003F     } else {
                 _0x6:
                 ; 0000 0040         lcd_puts("Nhiet do an toan");
                +
0000a8 e7a1     +LDI R26 , LOW ( _0x7 + ( 17 ) )
0000a9 e0b1     +LDI R27 , HIGH ( _0x7 + ( 17 ) )
                 	__POINTW2MN _0x7,17
                 _0x18:
0000aa 940e 0334 	CALL _lcd_puts
                 ; 0000 0041     }
                 ; 0000 0042     lcd_gotoxy(0, 1);
0000ac e0e0      	LDI  R30,LOW(0)
0000ad 93ea      	ST   -Y,R30
0000ae e0a1      	LDI  R26,LOW(1)
0000af 940e 0306 	CALL _lcd_gotoxy
                 ; 0000 0043     lcd_puts(buffer);
0000b1 81ac      	LDD  R26,Y+4
0000b2 81bd      	LDD  R27,Y+4+1
0000b3 940e 0334 	CALL _lcd_puts
                 ; 0000 0044 }
0000b5 9626      	ADIW R28,6
0000b6 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x7:
000160           	.BYTE 0x22
                 ;void main(void)
                 ; 0000 0046 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0047     // Port A initialization
                 ; 0000 0048     PORTA=0x00;
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 bbeb      	OUT  0x1B,R30
                 ; 0000 0049     DDRA=0x00;
0000b9 bbea      	OUT  0x1A,R30
                 ; 0000 004A 
                 ; 0000 004B     // Port B initialization
                 ; 0000 004C     PORTB=0x00;
0000ba bbe8      	OUT  0x18,R30
                 ; 0000 004D     DDRB=0x00;
0000bb bbe7      	OUT  0x17,R30
                 ; 0000 004E 
                 ; 0000 004F     // Port C initialization
                 ; 0000 0050     PORTC=0x00;
0000bc bbe5      	OUT  0x15,R30
                 ; 0000 0051     DDRC=0x00;
0000bd bbe4      	OUT  0x14,R30
                 ; 0000 0052 
                 ; 0000 0053     // Port D initialization
                 ; 0000 0054     PORTD=0x00;
0000be bbe2      	OUT  0x12,R30
                 ; 0000 0055     DDRD=0x01; // Khoi tao mode output cho portD.0 = 1
0000bf e0e1      	LDI  R30,LOW(1)
0000c0 bbe1      	OUT  0x11,R30
                 ; 0000 0056 
                 ; 0000 0057     // Timer/Counter 0 initialization
                 ; 0000 0058     // Clock source: System Clock
                 ; 0000 0059     // Clock value: Timer 0 Stopped
                 ; 0000 005A     // Mode: Normal top=0xFF
                 ; 0000 005B     // OC0 output: Disconnected
                 ; 0000 005C     TCCR0=0x00;
0000c1 e0e0      	LDI  R30,LOW(0)
0000c2 bfe3      	OUT  0x33,R30
                 ; 0000 005D     TCNT0=0x00;
0000c3 bfe2      	OUT  0x32,R30
                 ; 0000 005E     OCR0=0x00;
0000c4 bfec      	OUT  0x3C,R30
                 ; 0000 005F 
                 ; 0000 0060     // Timer/Counter 1 initialization
                 ; 0000 0061     // Clock source: System Clock
                 ; 0000 0062     // Clock value: Timer1 Stopped
                 ; 0000 0063     // Mode: Normal top=0xFFFF
                 ; 0000 0064     // OC1A output: Discon.
                 ; 0000 0065     // OC1B output: Discon.
                 ; 0000 0066     // Noise Canceler: Off
                 ; 0000 0067     // Input Capture on Falling Edge
                 ; 0000 0068     // Timer1 Overflow Interrupt: Off
                 ; 0000 0069     // Input Capture Interrupt: Off
                 ; 0000 006A     // Compare A Match Interrupt: Off
                 ; 0000 006B     // Compare B Match Interrupt: Off
                 ; 0000 006C     TCCR1A=0x00;
0000c5 bdef      	OUT  0x2F,R30
                 ; 0000 006D     TCCR1B=0x00;
0000c6 bdee      	OUT  0x2E,R30
                 ; 0000 006E     TCNT1H=0x00;
0000c7 bded      	OUT  0x2D,R30
                 ; 0000 006F     TCNT1L=0x00;
0000c8 bdec      	OUT  0x2C,R30
                 ; 0000 0070     ICR1H=0x00;
0000c9 bde7      	OUT  0x27,R30
                 ; 0000 0071     ICR1L=0x00;
0000ca bde6      	OUT  0x26,R30
                 ; 0000 0072     OCR1AH=0x00;
0000cb bdeb      	OUT  0x2B,R30
                 ; 0000 0073     OCR1AL=0x00;
0000cc bdea      	OUT  0x2A,R30
                 ; 0000 0074     OCR1BH=0x00;
0000cd bde9      	OUT  0x29,R30
                 ; 0000 0075     OCR1BL=0x00;
0000ce bde8      	OUT  0x28,R30
                 ; 0000 0076 
                 ; 0000 0077     // Timer/Counter 2 initialization
                 ; 0000 0078     // Clock source: System Clock
                 ; 0000 0079     // Clock value: Timer2 Stopped
                 ; 0000 007A     // Mode: Normal top=0xFF
                 ; 0000 007B     // OC2 output: Disconnected
                 ; 0000 007C     ASSR=0x00;
0000cf bde2      	OUT  0x22,R30
                 ; 0000 007D     TCCR2=0x00;
0000d0 bde5      	OUT  0x25,R30
                 ; 0000 007E     TCNT2=0x00;
0000d1 bde4      	OUT  0x24,R30
                 ; 0000 007F     OCR2=0x00;
0000d2 bde3      	OUT  0x23,R30
                 ; 0000 0080 
                 ; 0000 0081     // External Interrupt(s) initialization
                 ; 0000 0082     // INT0: Off
                 ; 0000 0083     // INT1: Off
                 ; 0000 0084     // INT2: Off
                 ; 0000 0085     MCUCR=0x00;
0000d3 bfe5      	OUT  0x35,R30
                 ; 0000 0086     MCUCSR=0x00;
0000d4 bfe4      	OUT  0x34,R30
                 ; 0000 0087 
                 ; 0000 0088     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0089     TIMSK=0x00;
0000d5 bfe9      	OUT  0x39,R30
                 ; 0000 008A 
                 ; 0000 008B     // USART initialization
                 ; 0000 008C     // USART disabled
                 ; 0000 008D     UCSRB=0x00;
0000d6 b9ea      	OUT  0xA,R30
                 ; 0000 008E 
                 ; 0000 008F     // Analog Comparator initialization
                 ; 0000 0090     // Analog Comparator: Off
                 ; 0000 0091     // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 0092     ACSR=0x80;
0000d7 e8e0      	LDI  R30,LOW(128)
0000d8 b9e8      	OUT  0x8,R30
                 ; 0000 0093     SFIOR=0x00;
0000d9 e0e0      	LDI  R30,LOW(0)
0000da bfe0      	OUT  0x30,R30
                 ; 0000 0094 
                 ; 0000 0095     // ADC initialization
                 ; 0000 0096     // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0097     // ADC Voltage Reference: AVCC pin
                 ; 0000 0098     // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0099     ADMUX=ADC_VREF_TYPE & 0xff;
0000db e4e0      	LDI  R30,LOW(64)
0000dc b9e7      	OUT  0x7,R30
                 ; 0000 009A     ADCSRA=0x84;
0000dd e8e4      	LDI  R30,LOW(132)
0000de b9e6      	OUT  0x6,R30
                 ; 0000 009B 
                 ; 0000 009C     // SPI initialization
                 ; 0000 009D     // SPI disabled
                 ; 0000 009E     SPCR=0x00;
0000df e0e0      	LDI  R30,LOW(0)
0000e0 b9ed      	OUT  0xD,R30
                 ; 0000 009F 
                 ; 0000 00A0     // TWI initialization
                 ; 0000 00A1     // TWI disabled
                 ; 0000 00A2     TWCR=0x00;
0000e1 bfe6      	OUT  0x36,R30
                 ; 0000 00A3 
                 ; 0000 00A4     // Alphanumeric LCD initialization
                 ; 0000 00A5     // Connections specified in the
                 ; 0000 00A6     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00A7     // RS - PORTD Bit 6
                 ; 0000 00A8     // RD - PORTD Bit 5
                 ; 0000 00A9     // EN - PORTD Bit 7
                 ; 0000 00AA     // D4 - PORTC Bit 4
                 ; 0000 00AB     // D5 - PORTC Bit 5
                 ; 0000 00AC     // D6 - PORTC Bit 6
                 ; 0000 00AD     // D7 - PORTC Bit 7
                 ; 0000 00AE     // Characters/line: 16
                 ; 0000 00AF     lcd_init(16);
0000e2 e1a0      	LDI  R26,LOW(16)
0000e3 940e 0345 	CALL _lcd_init
                 ; 0000 00B0 
                 ; 0000 00B1     while (1)
                 _0x9:
                 ; 0000 00B2     {
                 ; 0000 00B3         adc_value = read_adc(0);
0000e5 e0a0      	LDI  R26,LOW(0)
0000e6 dfa5      	RCALL _read_adc
0000e7 012f      	MOVW R4,R30
                 ; 0000 00B4         adc_temp = adc_value * 500.0f / 1024;
0000e8 2766      	CLR  R22
0000e9 2777      	CLR  R23
0000ea 940e 0441 	CALL __CDF1
                +
0000ec e0a0     +LDI R26 , LOW ( 0x43FA0000 )
0000ed e0b0     +LDI R27 , HIGH ( 0x43FA0000 )
0000ee ef8a     +LDI R24 , BYTE3 ( 0x43FA0000 )
0000ef e493     +LDI R25 , BYTE4 ( 0x43FA0000 )
                 	__GETD2N 0x43FA0000
0000f0 940e 046f 	CALL __MULF12
0000f2 01df      	MOVW R26,R30
0000f3 01cb      	MOVW R24,R22
                +
0000f4 e0e0     +LDI R30 , LOW ( 0x44800000 )
0000f5 e0f0     +LDI R31 , HIGH ( 0x44800000 )
0000f6 e860     +LDI R22 , BYTE3 ( 0x44800000 )
0000f7 e474     +LDI R23 , BYTE4 ( 0x44800000 )
                 	__GETD1N 0x44800000
0000f8 940e 04bd 	CALL __DIVF21
0000fa 93e0 0182 	STS  _adc_temp,R30
0000fc 93f0 0183 	STS  _adc_temp+1,R31
0000fe 9360 0184 	STS  _adc_temp+2,R22
000100 9370 0185 	STS  _adc_temp+3,R23
                 ; 0000 00B5         sprintf(buffer, "Nhiet do: %d", (int)adc_temp);
000102 e8e6      	LDI  R30,LOW(_buffer)
000103 e0f1      	LDI  R31,HIGH(_buffer)
000104 93fa      	ST   -Y,R31
000105 93ea      	ST   -Y,R30
                +
000106 e8e8     +LDI R30 , LOW ( 2 * _0x0 + ( 34 ) )
000107 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 34 ) )
                 	__POINTW1FN _0x0,34
000108 93fa      	ST   -Y,R31
000109 93ea      	ST   -Y,R30
00010a 940e 038c 	CALL SUBOPT_0x0
00010c 940e 0512 	CALL __CWD1
00010e 940e 0524 	CALL __PUTPARD1
000110 e084      	LDI  R24,4
000111 940e 02b1 	CALL _sprintf
000113 9628      	ADIW R28,8
                 ; 0000 00B6         display(buffer, adc_temp);
000114 e8e6      	LDI  R30,LOW(_buffer)
000115 e0f1      	LDI  R31,HIGH(_buffer)
000116 93fa      	ST   -Y,R31
000117 93ea      	ST   -Y,R30
000118 91a0 0182 	LDS  R26,_adc_temp
00011a 91b0 0183 	LDS  R27,_adc_temp+1
00011c 9180 0184 	LDS  R24,_adc_temp+2
00011e 9190 0185 	LDS  R25,_adc_temp+3
000120 df7a      	RCALL _display
                 ; 0000 00B7 
                 ; 0000 00B8         if ((int) adc_temp > 39) {
000121 940e 038c 	CALL SUBOPT_0x0
000123 97b8      	SBIW R30,40
000124 f08c      	BRLT _0xC
                 ; 0000 00B9             for (i = 0; i < 5; i++) {
000125 2477      	CLR  R7
                 _0xE:
000126 e0e5      	LDI  R30,LOW(5)
000127 167e      	CP   R7,R30
000128 f460      	BRSH _0xF
                 ; 0000 00BA                 PORTD.0 = 1;
000129 9a90      	SBI  0x12,0
                 ; 0000 00BB                 delay_ms(100);
00012a e6a4      	LDI  R26,LOW(100)
00012b e0b0      	LDI  R27,0
00012c 940e 03d1 	CALL _delay_ms
                 ; 0000 00BC                 PORTD.0 = 0;
00012e 9890      	CBI  0x12,0
                 ; 0000 00BD                 delay_ms(100);
00012f e6a4      	LDI  R26,LOW(100)
000130 e0b0      	LDI  R27,0
000131 940e 03d1 	CALL _delay_ms
                 ; 0000 00BE             }
000133 9473      	INC  R7
000134 cff1      	RJMP _0xE
                 _0xF:
                 ; 0000 00BF         } else {
000135 c005      	RJMP _0x14
                 _0xC:
                 ; 0000 00C0             PORTD.0 = 0;
000136 9890      	CBI  0x12,0
                 ; 0000 00C1             delay_ms(1000);
000137 eea8      	LDI  R26,LOW(1000)
000138 e0b3      	LDI  R27,HIGH(1000)
000139 940e 03d1 	CALL _delay_ms
                 ; 0000 00C2         }
                 _0x14:
                 ; 0000 00C3     }
00013b cfa9      	RJMP _0x9
                 ; 0000 00C4 }
                 _0x17:
00013c cfff      	RJMP _0x17
                 ; .FEND
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
00013d 93ba      	ST   -Y,R27
00013e 93aa      	ST   -Y,R26
00013f 931a      	ST   -Y,R17
000140 930a      	ST   -Y,R16
000141 81aa      	LDD  R26,Y+2
000142 81bb      	LDD  R27,Y+2+1
000143 9612      	ADIW R26,2
000144 940e 0517 	CALL __GETW1P
000146 9730      	SBIW R30,0
000147 f159      	BREQ _0x2020010
000148 81aa      	LDD  R26,Y+2
000149 81bb      	LDD  R27,Y+2+1
00014a 9614      	ADIW R26,4
00014b 940e 0517 	CALL __GETW1P
00014d 018f      	MOVW R16,R30
00014e 9730      	SBIW R30,0
00014f f061      	BREQ _0x2020012
                +
000150 3002     +CPI R16 , LOW ( 2 )
000151 e0e0     +LDI R30 , HIGH ( 2 )
000152 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000153 f098      	BRLO _0x2020013
000154 01f8      	MOVW R30,R16
000155 9731      	SBIW R30,1
000156 018f      	MOVW R16,R30
                +
000157 81aa     +LDD R26 , Y + 2
000158 81bb     +LDD R27 , Y + 2 + 1
000159 9614     +ADIW R26 , 4
00015a 93ed     +ST X + , R30
00015b 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
00015c 81aa      	LDD  R26,Y+2
00015d 81bb      	LDD  R27,Y+2+1
00015e 9612      	ADIW R26,2
00015f 91ed      	LD   R30,X+
000160 91fd      	LD   R31,X+
000161 9631      	ADIW R30,1
000162 93fe      	ST   -X,R31
000163 93ee      	ST   -X,R30
000164 9731      	SBIW R30,1
000165 81ac      	LDD  R26,Y+4
000166 83a0      	STD  Z+0,R26
                 _0x2020013:
000167 81aa      	LDD  R26,Y+2
000168 81bb      	LDD  R27,Y+2+1
000169 940e 0517 	CALL __GETW1P
00016b 23ff      	TST  R31
00016c f02a      	BRMI _0x2020014
00016d 91ed      	LD   R30,X+
00016e 91fd      	LD   R31,X+
00016f 9631      	ADIW R30,1
000170 93fe      	ST   -X,R31
000171 93ee      	ST   -X,R30
                 _0x2020014:
000172 c006      	RJMP _0x2020015
                 _0x2020010:
000173 81aa      	LDD  R26,Y+2
000174 81bb      	LDD  R27,Y+2+1
000175 efef      	LDI  R30,LOW(65535)
000176 efff      	LDI  R31,HIGH(65535)
000177 93ed      	ST   X+,R30
000178 93fc      	ST   X,R31
                 _0x2020015:
000179 8119      	LDD  R17,Y+1
00017a 8108      	LDD  R16,Y+0
00017b 9625      	ADIW R28,5
00017c 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
00017d 93ba      	ST   -Y,R27
00017e 93aa      	ST   -Y,R26
00017f 9726      	SBIW R28,6
000180 940e 052e 	CALL __SAVELOCR6
000182 e010      	LDI  R17,0
000183 85ac      	LDD  R26,Y+12
000184 85bd      	LDD  R27,Y+12+1
000185 e0e0      	LDI  R30,LOW(0)
000186 e0f0      	LDI  R31,HIGH(0)
000187 93ed      	ST   X+,R30
000188 93fc      	ST   X,R31
                 _0x2020016:
000189 89ea      	LDD  R30,Y+18
00018a 89fb      	LDD  R31,Y+18+1
00018b 9631      	ADIW R30,1
00018c 8bea      	STD  Y+18,R30
00018d 8bfb      	STD  Y+18+1,R31
00018e 9731      	SBIW R30,1
00018f 91e4      	LPM  R30,Z
000190 2f2e      	MOV  R18,R30
000191 30e0      	CPI  R30,0
000192 f409      	BRNE PC+2
000193 c115      	RJMP _0x2020018
000194 2fe1      	MOV  R30,R17
000195 30e0      	CPI  R30,0
000196 f439      	BRNE _0x202001C
000197 3225      	CPI  R18,37
000198 f411      	BRNE _0x202001D
000199 e011      	LDI  R17,LOW(1)
00019a c002      	RJMP _0x202001E
                 _0x202001D:
00019b 940e 0397 	CALL SUBOPT_0x1
                 _0x202001E:
00019d c10a      	RJMP _0x202001B
                 _0x202001C:
00019e 30e1      	CPI  R30,LOW(0x1)
00019f f4a9      	BRNE _0x202001F
0001a0 3225      	CPI  R18,37
0001a1 f419      	BRNE _0x2020020
0001a2 940e 0397 	CALL SUBOPT_0x1
0001a4 c102      	RJMP _0x20200CC
                 _0x2020020:
0001a5 e012      	LDI  R17,LOW(2)
0001a6 e040      	LDI  R20,LOW(0)
0001a7 e000      	LDI  R16,LOW(0)
0001a8 322d      	CPI  R18,45
0001a9 f411      	BRNE _0x2020021
0001aa e001      	LDI  R16,LOW(1)
0001ab c0fc      	RJMP _0x202001B
                 _0x2020021:
0001ac 322b      	CPI  R18,43
0001ad f411      	BRNE _0x2020022
0001ae e24b      	LDI  R20,LOW(43)
0001af c0f8      	RJMP _0x202001B
                 _0x2020022:
0001b0 3220      	CPI  R18,32
0001b1 f411      	BRNE _0x2020023
0001b2 e240      	LDI  R20,LOW(32)
0001b3 c0f4      	RJMP _0x202001B
                 _0x2020023:
0001b4 c002      	RJMP _0x2020024
                 _0x202001F:
0001b5 30e2      	CPI  R30,LOW(0x2)
0001b6 f439      	BRNE _0x2020025
                 _0x2020024:
0001b7 e050      	LDI  R21,LOW(0)
0001b8 e013      	LDI  R17,LOW(3)
0001b9 3320      	CPI  R18,48
0001ba f411      	BRNE _0x2020026
0001bb 6800      	ORI  R16,LOW(128)
0001bc c0eb      	RJMP _0x202001B
                 _0x2020026:
0001bd c003      	RJMP _0x2020027
                 _0x2020025:
0001be 30e3      	CPI  R30,LOW(0x3)
0001bf f009      	BREQ PC+2
0001c0 c0e7      	RJMP _0x202001B
                 _0x2020027:
0001c1 3320      	CPI  R18,48
0001c2 f010      	BRLO _0x202002A
0001c3 332a      	CPI  R18,58
0001c4 f008      	BRLO _0x202002B
                 _0x202002A:
0001c5 c007      	RJMP _0x2020029
                 _0x202002B:
0001c6 e0aa      	LDI  R26,LOW(10)
0001c7 9f5a      	MUL  R21,R26
0001c8 2d50      	MOV  R21,R0
0001c9 2fe2      	MOV  R30,R18
0001ca 53e0      	SUBI R30,LOW(48)
0001cb 0f5e      	ADD  R21,R30
0001cc c0db      	RJMP _0x202001B
                 _0x2020029:
0001cd 2fe2      	MOV  R30,R18
0001ce 36e3      	CPI  R30,LOW(0x63)
0001cf f449      	BRNE _0x202002F
0001d0 940e 039e 	CALL SUBOPT_0x2
0001d2 89e8      	LDD  R30,Y+16
0001d3 89f9      	LDD  R31,Y+16+1
0001d4 81a4      	LDD  R26,Z+4
0001d5 93aa      	ST   -Y,R26
0001d6 940e 03a4 	CALL SUBOPT_0x3
0001d8 c0ce      	RJMP _0x2020030
                 _0x202002F:
0001d9 37e3      	CPI  R30,LOW(0x73)
0001da f441      	BRNE _0x2020032
0001db 940e 039e 	CALL SUBOPT_0x2
0001dd 940e 03aa 	CALL SUBOPT_0x4
0001df 940e 0373 	CALL _strlen
0001e1 2f1e      	MOV  R17,R30
0001e2 c00a      	RJMP _0x2020033
                 _0x2020032:
0001e3 37e0      	CPI  R30,LOW(0x70)
0001e4 f461      	BRNE _0x2020035
0001e5 940e 039e 	CALL SUBOPT_0x2
0001e7 940e 03aa 	CALL SUBOPT_0x4
0001e9 940e 037f 	CALL _strlenf
0001eb 2f1e      	MOV  R17,R30
0001ec 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0001ed 6002      	ORI  R16,LOW(2)
0001ee 770f      	ANDI R16,LOW(127)
0001ef e030      	LDI  R19,LOW(0)
0001f0 c034      	RJMP _0x2020036
                 _0x2020035:
0001f1 36e4      	CPI  R30,LOW(0x64)
0001f2 f011      	BREQ _0x2020039
0001f3 36e9      	CPI  R30,LOW(0x69)
0001f4 f411      	BRNE _0x202003A
                 _0x2020039:
0001f5 6004      	ORI  R16,LOW(4)
0001f6 c002      	RJMP _0x202003B
                 _0x202003A:
0001f7 37e5      	CPI  R30,LOW(0x75)
0001f8 f431      	BRNE _0x202003C
                 _0x202003B:
0001f9 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0001fa e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0001fb 83ee      	STD  Y+6,R30
0001fc 83ff      	STD  Y+6+1,R31
0001fd e015      	LDI  R17,LOW(5)
0001fe c00c      	RJMP _0x202003D
                 _0x202003C:
0001ff 35e8      	CPI  R30,LOW(0x58)
000200 f411      	BRNE _0x202003F
000201 6008      	ORI  R16,LOW(8)
000202 c003      	RJMP _0x2020040
                 _0x202003F:
000203 37e8      	CPI  R30,LOW(0x78)
000204 f009      	BREQ PC+2
000205 c0a1      	RJMP _0x2020071
                 _0x2020040:
000206 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000207 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000208 83ee      	STD  Y+6,R30
000209 83ff      	STD  Y+6+1,R31
00020a e014      	LDI  R17,LOW(4)
                 _0x202003D:
00020b ff02      	SBRS R16,2
00020c c014      	RJMP _0x2020042
00020d 940e 039e 	CALL SUBOPT_0x2
00020f 940e 03b4 	CALL SUBOPT_0x5
000211 85ab      	LDD  R26,Y+11
000212 23aa      	TST  R26
000213 f43a      	BRPL _0x2020043
000214 85ea      	LDD  R30,Y+10
000215 85fb      	LDD  R31,Y+10+1
000216 940e 0506 	CALL __ANEGW1
000218 87ea      	STD  Y+10,R30
000219 87fb      	STD  Y+10+1,R31
00021a e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00021b 3040      	CPI  R20,0
00021c f011      	BREQ _0x2020044
00021d 5f1f      	SUBI R17,-LOW(1)
00021e c001      	RJMP _0x2020045
                 _0x2020044:
00021f 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000220 c004      	RJMP _0x2020046
                 _0x2020042:
000221 940e 039e 	CALL SUBOPT_0x2
000223 940e 03b4 	CALL SUBOPT_0x5
                 _0x2020046:
                 _0x2020036:
000225 fd00      	SBRC R16,0
000226 c011      	RJMP _0x2020047
                 _0x2020048:
000227 1715      	CP   R17,R21
000228 f478      	BRSH _0x202004A
000229 ff07      	SBRS R16,7
00022a c008      	RJMP _0x202004B
00022b ff02      	SBRS R16,2
00022c c004      	RJMP _0x202004C
00022d 7f0b      	ANDI R16,LOW(251)
00022e 2f24      	MOV  R18,R20
00022f 5011      	SUBI R17,LOW(1)
000230 c001      	RJMP _0x202004D
                 _0x202004C:
000231 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000232 c001      	RJMP _0x202004E
                 _0x202004B:
000233 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000234 940e 0397 	CALL SUBOPT_0x1
000236 5051      	SUBI R21,LOW(1)
000237 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000238 2f31      	MOV  R19,R17
000239 ff01      	SBRS R16,1
00023a c017      	RJMP _0x202004F
                 _0x2020050:
00023b 3030      	CPI  R19,0
00023c f0a1      	BREQ _0x2020052
00023d ff03      	SBRS R16,3
00023e c006      	RJMP _0x2020053
00023f 81ee      	LDD  R30,Y+6
000240 81ff      	LDD  R31,Y+6+1
000241 9125      	LPM  R18,Z+
000242 83ee      	STD  Y+6,R30
000243 83ff      	STD  Y+6+1,R31
000244 c005      	RJMP _0x2020054
                 _0x2020053:
000245 81ae      	LDD  R26,Y+6
000246 81bf      	LDD  R27,Y+6+1
000247 912d      	LD   R18,X+
000248 83ae      	STD  Y+6,R26
000249 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00024a 940e 0397 	CALL SUBOPT_0x1
00024c 3050      	CPI  R21,0
00024d f009      	BREQ _0x2020055
00024e 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00024f 5031      	SUBI R19,LOW(1)
000250 cfea      	RJMP _0x2020050
                 _0x2020052:
000251 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000252 e320      	LDI  R18,LOW(48)
000253 81ee      	LDD  R30,Y+6
000254 81ff      	LDD  R31,Y+6+1
000255 940e 051b 	CALL __GETW1PF
000257 87e8      	STD  Y+8,R30
000258 87f9      	STD  Y+8+1,R31
000259 81ee      	LDD  R30,Y+6
00025a 81ff      	LDD  R31,Y+6+1
00025b 9632      	ADIW R30,2
00025c 83ee      	STD  Y+6,R30
00025d 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00025e 85e8      	LDD  R30,Y+8
00025f 85f9      	LDD  R31,Y+8+1
000260 85aa      	LDD  R26,Y+10
000261 85bb      	LDD  R27,Y+10+1
000262 17ae      	CP   R26,R30
000263 07bf      	CPC  R27,R31
000264 f050      	BRLO _0x202005C
000265 5f2f      	SUBI R18,-LOW(1)
000266 85a8      	LDD  R26,Y+8
000267 85b9      	LDD  R27,Y+8+1
000268 85ea      	LDD  R30,Y+10
000269 85fb      	LDD  R31,Y+10+1
00026a 1bea      	SUB  R30,R26
00026b 0bfb      	SBC  R31,R27
00026c 87ea      	STD  Y+10,R30
00026d 87fb      	STD  Y+10+1,R31
00026e cfef      	RJMP _0x202005A
                 _0x202005C:
00026f 332a      	CPI  R18,58
000270 f028      	BRLO _0x202005D
000271 ff03      	SBRS R16,3
000272 c002      	RJMP _0x202005E
000273 5f29      	SUBI R18,-LOW(7)
000274 c001      	RJMP _0x202005F
                 _0x202005E:
000275 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000276 fd04      	SBRC R16,4
000277 c01a      	RJMP _0x2020061
000278 3321      	CPI  R18,49
000279 f420      	BRSH _0x2020063
00027a 85a8      	LDD  R26,Y+8
00027b 85b9      	LDD  R27,Y+8+1
00027c 9711      	SBIW R26,1
00027d f409      	BRNE _0x2020062
                 _0x2020063:
00027e c009      	RJMP _0x20200CD
                 _0x2020062:
00027f 1753      	CP   R21,R19
000280 f010      	BRLO _0x2020067
000281 ff00      	SBRS R16,0
000282 c001      	RJMP _0x2020068
                 _0x2020067:
000283 c013      	RJMP _0x2020066
                 _0x2020068:
000284 e220      	LDI  R18,LOW(32)
000285 ff07      	SBRS R16,7
000286 c00b      	RJMP _0x2020069
000287 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000288 6100      	ORI  R16,LOW(16)
000289 ff02      	SBRS R16,2
00028a c007      	RJMP _0x202006A
00028b 7f0b      	ANDI R16,LOW(251)
00028c 934a      	ST   -Y,R20
00028d 940e 03a4 	CALL SUBOPT_0x3
00028f 3050      	CPI  R21,0
000290 f009      	BREQ _0x202006B
000291 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000292 940e 0397 	CALL SUBOPT_0x1
000294 3050      	CPI  R21,0
000295 f009      	BREQ _0x202006C
000296 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000297 5031      	SUBI R19,LOW(1)
000298 85a8      	LDD  R26,Y+8
000299 85b9      	LDD  R27,Y+8+1
00029a 9712      	SBIW R26,2
00029b f008      	BRLO _0x2020059
00029c cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
00029d ff00      	SBRS R16,0
00029e c008      	RJMP _0x202006D
                 _0x202006E:
00029f 3050      	CPI  R21,0
0002a0 f031      	BREQ _0x2020070
0002a1 5051      	SUBI R21,LOW(1)
0002a2 e2e0      	LDI  R30,LOW(32)
0002a3 93ea      	ST   -Y,R30
0002a4 940e 03a4 	CALL SUBOPT_0x3
0002a6 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0002a7 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0002a8 cee0      	RJMP _0x2020016
                 _0x2020018:
0002a9 85ac      	LDD  R26,Y+12
0002aa 85bd      	LDD  R27,Y+12+1
0002ab 940e 0517 	CALL __GETW1P
0002ad 940e 0535 	CALL __LOADLOCR6
0002af 9664      	ADIW R28,20
0002b0 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002b1 92ff      	PUSH R15
0002b2 2ef8      	MOV  R15,R24
0002b3 9726      	SBIW R28,6
0002b4 940e 0530 	CALL __SAVELOCR4
0002b6 940e 03bc 	CALL SUBOPT_0x6
0002b8 9730      	SBIW R30,0
0002b9 f419      	BRNE _0x2020072
0002ba efef      	LDI  R30,LOW(65535)
0002bb efff      	LDI  R31,HIGH(65535)
0002bc c023      	RJMP _0x20C0002
                 _0x2020072:
0002bd 01de      	MOVW R26,R28
0002be 9616      	ADIW R26,6
0002bf 940e 0502 	CALL __ADDW2R15
0002c1 018d      	MOVW R16,R26
0002c2 940e 03bc 	CALL SUBOPT_0x6
0002c4 83ee      	STD  Y+6,R30
0002c5 83ff      	STD  Y+6+1,R31
0002c6 e0e0      	LDI  R30,LOW(0)
0002c7 87e8      	STD  Y+8,R30
0002c8 87e9      	STD  Y+8+1,R30
0002c9 01de      	MOVW R26,R28
0002ca 961a      	ADIW R26,10
0002cb 940e 0502 	CALL __ADDW2R15
0002cd 940e 0517 	CALL __GETW1P
0002cf 93fa      	ST   -Y,R31
0002d0 93ea      	ST   -Y,R30
0002d1 931a      	ST   -Y,R17
0002d2 930a      	ST   -Y,R16
0002d3 e3ed      	LDI  R30,LOW(_put_buff_G101)
0002d4 e0f1      	LDI  R31,HIGH(_put_buff_G101)
0002d5 93fa      	ST   -Y,R31
0002d6 93ea      	ST   -Y,R30
0002d7 01de      	MOVW R26,R28
0002d8 961a      	ADIW R26,10
0002d9 dea3      	RCALL __print_G101
0002da 019f      	MOVW R18,R30
0002db 81ae      	LDD  R26,Y+6
0002dc 81bf      	LDD  R27,Y+6+1
0002dd e0e0      	LDI  R30,LOW(0)
0002de 93ec      	ST   X,R30
0002df 01f9      	MOVW R30,R18
                 _0x20C0002:
0002e0 940e 0537 	CALL __LOADLOCR4
0002e2 962a      	ADIW R28,10
0002e3 90ff      	POP  R15
0002e4 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G102:
                 ; .FSTART __lcd_write_nibble_G102
0002e5 93aa      	ST   -Y,R26
0002e6 b3e5      	IN   R30,0x15
0002e7 70ef      	ANDI R30,LOW(0xF)
0002e8 2fae      	MOV  R26,R30
0002e9 81e8      	LD   R30,Y
0002ea 7fe0      	ANDI R30,LOW(0xF0)
0002eb 2bea      	OR   R30,R26
0002ec bbe5      	OUT  0x15,R30
                +
0002ed e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0002ee 958a     +DEC R24
0002ef f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0002f0 9a97      	SBI  0x12,7
                +
0002f1 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0002f2 958a     +DEC R24
0002f3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0002f4 9897      	CBI  0x12,7
                +
0002f5 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0002f6 958a     +DEC R24
0002f7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0002f8 c078      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002f9 93aa      	ST   -Y,R26
0002fa 81a8      	LD   R26,Y
0002fb dfe9      	RCALL __lcd_write_nibble_G102
0002fc 81e8          ld    r30,y
0002fd 95e2          swap  r30
0002fe 83e8          st    y,r30
0002ff 81a8      	LD   R26,Y
000300 dfe4      	RCALL __lcd_write_nibble_G102
                +
000301 ec88     +LDI R24 , LOW ( 200 )
000302 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000303 9701     +SBIW R24 , 1
000304 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000305 c06b      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000306 93aa      	ST   -Y,R26
000307 81e8      	LD   R30,Y
000308 e0f0      	LDI  R31,0
000309 56ea      	SUBI R30,LOW(-__base_y_G102)
00030a 4ffe      	SBCI R31,HIGH(-__base_y_G102)
00030b 81e0      	LD   R30,Z
00030c 81a9      	LDD  R26,Y+1
00030d 0fae      	ADD  R26,R30
00030e dfea      	RCALL __lcd_write_data
00030f 8069      	LDD  R6,Y+1
000310 8098      	LDD  R9,Y+0
000311 9622      	ADIW R28,2
000312 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000313 e0a2      	LDI  R26,LOW(2)
000314 940e 03c3 	CALL SUBOPT_0x7
000316 e0ac      	LDI  R26,LOW(12)
000317 dfe1      	RCALL __lcd_write_data
000318 e0a1      	LDI  R26,LOW(1)
000319 940e 03c3 	CALL SUBOPT_0x7
00031b e0e0      	LDI  R30,LOW(0)
00031c 2e9e      	MOV  R9,R30
00031d 2e6e      	MOV  R6,R30
00031e 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00031f 93aa      	ST   -Y,R26
000320 81a8      	LD   R26,Y
000321 30aa      	CPI  R26,LOW(0xA)
000322 f011      	BREQ _0x2040005
000323 1468      	CP   R6,R8
000324 f048      	BRLO _0x2040004
                 _0x2040005:
000325 e0e0      	LDI  R30,LOW(0)
000326 93ea      	ST   -Y,R30
000327 9493      	INC  R9
000328 2da9      	MOV  R26,R9
000329 dfdc      	RCALL _lcd_gotoxy
00032a 81a8      	LD   R26,Y
00032b 30aa      	CPI  R26,LOW(0xA)
00032c f409      	BRNE _0x2040007
00032d c043      	RJMP _0x20C0001
                 _0x2040007:
                 _0x2040004:
00032e 9463      	INC  R6
00032f 9a96      	SBI  0x12,6
000330 81a8      	LD   R26,Y
000331 dfc7      	RCALL __lcd_write_data
000332 9896      	CBI  0x12,6
000333 c03d      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000334 93ba      	ST   -Y,R27
000335 93aa      	ST   -Y,R26
000336 931a      	ST   -Y,R17
                 _0x2040008:
000337 81a9      	LDD  R26,Y+1
000338 81ba      	LDD  R27,Y+1+1
000339 91ed      	LD   R30,X+
00033a 83a9      	STD  Y+1,R26
00033b 83ba      	STD  Y+1+1,R27
00033c 2f1e      	MOV  R17,R30
00033d 30e0      	CPI  R30,0
00033e f019      	BREQ _0x204000A
00033f 2fa1      	MOV  R26,R17
000340 dfde      	RCALL _lcd_putchar
000341 cff5      	RJMP _0x2040008
                 _0x204000A:
000342 8118      	LDD  R17,Y+0
000343 9623      	ADIW R28,3
000344 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000345 93aa      	ST   -Y,R26
000346 b3e4      	IN   R30,0x14
000347 6fe0      	ORI  R30,LOW(0xF0)
000348 bbe4      	OUT  0x14,R30
000349 9a8f      	SBI  0x11,7
00034a 9a8e      	SBI  0x11,6
00034b 9a8d      	SBI  0x11,5
00034c 9897      	CBI  0x12,7
00034d 9896      	CBI  0x12,6
00034e 9895      	CBI  0x12,5
00034f 8088      	LDD  R8,Y+0
000350 81e8      	LD   R30,Y
000351 58e0      	SUBI R30,-LOW(128)
                +
000352 93e0 0198+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
000354 81e8      	LD   R30,Y
000355 54e0      	SUBI R30,-LOW(192)
                +
000356 93e0 0199+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
000358 e1a4      	LDI  R26,LOW(20)
000359 e0b0      	LDI  R27,0
00035a 940e 03d1 	CALL _delay_ms
00035c 940e 03c9 	CALL SUBOPT_0x8
00035e 940e 03c9 	CALL SUBOPT_0x8
000360 940e 03c9 	CALL SUBOPT_0x8
000362 e2a0      	LDI  R26,LOW(32)
000363 df81      	RCALL __lcd_write_nibble_G102
                +
000364 e980     +LDI R24 , LOW ( 400 )
000365 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000366 9701     +SBIW R24 , 1
000367 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000368 e2a8      	LDI  R26,LOW(40)
000369 df8f      	RCALL __lcd_write_data
00036a e0a4      	LDI  R26,LOW(4)
00036b df8d      	RCALL __lcd_write_data
00036c e8a5      	LDI  R26,LOW(133)
00036d df8b      	RCALL __lcd_write_data
00036e e0a6      	LDI  R26,LOW(6)
00036f df89      	RCALL __lcd_write_data
000370 dfa2      	RCALL _lcd_clear
                 _0x20C0001:
000371 9621      	ADIW R28,1
000372 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000373 93ba      	ST   -Y,R27
000374 93aa      	ST   -Y,R26
000375 91a9          ld   r26,y+
000376 91b9          ld   r27,y+
000377 27ee          clr  r30
000378 27ff          clr  r31
                 strlen0:
000379 916d          ld   r22,x+
00037a 2366          tst  r22
00037b f011          breq strlen1
00037c 9631          adiw r30,1
00037d cffb          rjmp strlen0
                 strlen1:
00037e 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00037f 93ba      	ST   -Y,R27
000380 93aa      	ST   -Y,R26
000381 27aa          clr  r26
000382 27bb          clr  r27
000383 91e9          ld   r30,y+
000384 91f9          ld   r31,y+
                 strlenf0:
000385 9005      	lpm  r0,z+
000386 2000          tst  r0
000387 f011          breq strlenf1
000388 9611          adiw r26,1
000389 cffb          rjmp strlenf0
                 strlenf1:
00038a 01fd          movw r30,r26
00038b 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _adc_temp:
000182           	.BYTE 0x4
                 _buffer:
000186           	.BYTE 0x10
                 __base_y_G102:
000196           	.BYTE 0x4
                 __seed_G103:
00019a           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
00038c 91e0 0182 	LDS  R30,_adc_temp
00038e 91f0 0183 	LDS  R31,_adc_temp+1
000390 9160 0184 	LDS  R22,_adc_temp+2
000392 9170 0185 	LDS  R23,_adc_temp+3
000394 940e 040a 	CALL __CFD1
000396 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
000397 932a      	ST   -Y,R18
000398 85ad      	LDD  R26,Y+13
000399 85be      	LDD  R27,Y+13+1
00039a 85ef      	LDD  R30,Y+15
00039b 89f8      	LDD  R31,Y+15+1
00039c 9509      	ICALL
00039d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
00039e 89e8      	LDD  R30,Y+16
00039f 89f9      	LDD  R31,Y+16+1
0003a0 9734      	SBIW R30,4
0003a1 8be8      	STD  Y+16,R30
0003a2 8bf9      	STD  Y+16+1,R31
0003a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
0003a4 85ad      	LDD  R26,Y+13
0003a5 85be      	LDD  R27,Y+13+1
0003a6 85ef      	LDD  R30,Y+15
0003a7 89f8      	LDD  R31,Y+15+1
0003a8 9509      	ICALL
0003a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
0003aa 89a8      	LDD  R26,Y+16
0003ab 89b9      	LDD  R27,Y+16+1
0003ac 9614      	ADIW R26,4
0003ad 940e 0517 	CALL __GETW1P
0003af 83ee      	STD  Y+6,R30
0003b0 83ff      	STD  Y+6+1,R31
0003b1 81ae      	LDD  R26,Y+6
0003b2 81bf      	LDD  R27,Y+6+1
0003b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
0003b4 89a8      	LDD  R26,Y+16
0003b5 89b9      	LDD  R27,Y+16+1
0003b6 9614      	ADIW R26,4
0003b7 940e 0517 	CALL __GETW1P
0003b9 87ea      	STD  Y+10,R30
0003ba 87fb      	STD  Y+10+1,R31
0003bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0003bc 01de      	MOVW R26,R28
0003bd 961c      	ADIW R26,12
0003be 940e 0502 	CALL __ADDW2R15
0003c0 940e 0517 	CALL __GETW1P
0003c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0003c3 940e 02f9 	CALL __lcd_write_data
0003c5 e0a3      	LDI  R26,LOW(3)
0003c6 e0b0      	LDI  R27,0
0003c7 940c 03d1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
0003c9 e3a0      	LDI  R26,LOW(48)
0003ca 940e 02e5 	CALL __lcd_write_nibble_G102
                +
0003cc e980     +LDI R24 , LOW ( 400 )
0003cd e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
0003ce 9701     +SBIW R24 , 1
0003cf f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
0003d0 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003d1 9610      	adiw r26,0
0003d2 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003d3 ea80     +LDI R24 , LOW ( 0xFA0 )
0003d4 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0003d5 9701     +SBIW R24 , 1
0003d6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0003d7 95a8      	wdr
0003d8 9711      	sbiw r26,1
0003d9 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003da 9508      	ret
                 
                 __ROUND_REPACK:
0003db 2355      	TST  R21
0003dc f442      	BRPL __REPACK
0003dd 3850      	CPI  R21,0x80
0003de f411      	BRNE __ROUND_REPACK0
0003df ffe0      	SBRS R30,0
0003e0 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0003e1 9631      	ADIW R30,1
0003e2 1f69      	ADC  R22,R25
0003e3 1f79      	ADC  R23,R25
0003e4 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0003e5 e850      	LDI  R21,0x80
0003e6 2757      	EOR  R21,R23
0003e7 f411      	BRNE __REPACK0
0003e8 935f      	PUSH R21
0003e9 c073      	RJMP __ZERORES
                 __REPACK0:
0003ea 3f5f      	CPI  R21,0xFF
0003eb f031      	BREQ __REPACK1
0003ec 0f66      	LSL  R22
0003ed 0c00      	LSL  R0
0003ee 9557      	ROR  R21
0003ef 9567      	ROR  R22
0003f0 2f75      	MOV  R23,R21
0003f1 9508      	RET
                 __REPACK1:
0003f2 935f      	PUSH R21
0003f3 2000      	TST  R0
0003f4 f00a      	BRMI __REPACK2
0003f5 c073      	RJMP __MAXRES
                 __REPACK2:
0003f6 c06c      	RJMP __MINRES
                 
                 __UNPACK:
0003f7 e850      	LDI  R21,0x80
0003f8 2e19      	MOV  R1,R25
0003f9 2215      	AND  R1,R21
0003fa 0f88      	LSL  R24
0003fb 1f99      	ROL  R25
0003fc 2795      	EOR  R25,R21
0003fd 0f55      	LSL  R21
0003fe 9587      	ROR  R24
                 
                 __UNPACK1:
0003ff e850      	LDI  R21,0x80
000400 2e07      	MOV  R0,R23
000401 2205      	AND  R0,R21
000402 0f66      	LSL  R22
000403 1f77      	ROL  R23
000404 2775      	EOR  R23,R21
000405 0f55      	LSL  R21
000406 9567      	ROR  R22
000407 9508      	RET
                 
                 __CFD1U:
000408 9468      	SET
000409 c001      	RJMP __CFD1U0
                 __CFD1:
00040a 94e8      	CLT
                 __CFD1U0:
00040b 935f      	PUSH R21
00040c dff2      	RCALL __UNPACK1
00040d 3870      	CPI  R23,0x80
00040e f018      	BRLO __CFD10
00040f 3f7f      	CPI  R23,0xFF
000410 f408      	BRCC __CFD10
000411 c04b      	RJMP __ZERORES
                 __CFD10:
000412 e156      	LDI  R21,22
000413 1b57      	SUB  R21,R23
000414 f4aa      	BRPL __CFD11
000415 9551      	NEG  R21
000416 3058      	CPI  R21,8
000417 f40e      	BRTC __CFD19
000418 3059      	CPI  R21,9
                 __CFD19:
000419 f030      	BRLO __CFD17
00041a efef      	SER  R30
00041b efff      	SER  R31
00041c ef6f      	SER  R22
00041d e77f      	LDI  R23,0x7F
00041e f977      	BLD  R23,7
00041f c01a      	RJMP __CFD15
                 __CFD17:
000420 2777      	CLR  R23
000421 2355      	TST  R21
000422 f0b9      	BREQ __CFD15
                 __CFD18:
000423 0fee      	LSL  R30
000424 1fff      	ROL  R31
000425 1f66      	ROL  R22
000426 1f77      	ROL  R23
000427 955a      	DEC  R21
000428 f7d1      	BRNE __CFD18
000429 c010      	RJMP __CFD15
                 __CFD11:
00042a 2777      	CLR  R23
                 __CFD12:
00042b 3058      	CPI  R21,8
00042c f028      	BRLO __CFD13
00042d 2fef      	MOV  R30,R31
00042e 2ff6      	MOV  R31,R22
00042f 2f67      	MOV  R22,R23
000430 5058      	SUBI R21,8
000431 cff9      	RJMP __CFD12
                 __CFD13:
000432 2355      	TST  R21
000433 f031      	BREQ __CFD15
                 __CFD14:
000434 9576      	LSR  R23
000435 9567      	ROR  R22
000436 95f7      	ROR  R31
000437 95e7      	ROR  R30
000438 955a      	DEC  R21
000439 f7d1      	BRNE __CFD14
                 __CFD15:
00043a 2000      	TST  R0
00043b f40a      	BRPL __CFD16
00043c d0cd      	RCALL __ANEGD1
                 __CFD16:
00043d 915f      	POP  R21
00043e 9508      	RET
                 
                 __CDF1U:
00043f 9468      	SET
000440 c001      	RJMP __CDF1U0
                 __CDF1:
000441 94e8      	CLT
                 __CDF1U0:
000442 9730      	SBIW R30,0
000443 4060      	SBCI R22,0
000444 4070      	SBCI R23,0
000445 f0b1      	BREQ __CDF10
000446 2400      	CLR  R0
000447 f026      	BRTS __CDF11
000448 2377      	TST  R23
000449 f412      	BRPL __CDF11
00044a 9400      	COM  R0
00044b d0be      	RCALL __ANEGD1
                 __CDF11:
00044c 2e17      	MOV  R1,R23
00044d e17e      	LDI  R23,30
00044e 2011      	TST  R1
                 __CDF12:
00044f f032      	BRMI __CDF13
000450 957a      	DEC  R23
000451 0fee      	LSL  R30
000452 1fff      	ROL  R31
000453 1f66      	ROL  R22
000454 1c11      	ROL  R1
000455 cff9      	RJMP __CDF12
                 __CDF13:
000456 2fef      	MOV  R30,R31
000457 2ff6      	MOV  R31,R22
000458 2d61      	MOV  R22,R1
000459 935f      	PUSH R21
00045a df8a      	RCALL __REPACK
00045b 915f      	POP  R21
                 __CDF10:
00045c 9508      	RET
                 
                 __ZERORES:
00045d 27ee      	CLR  R30
00045e 27ff      	CLR  R31
00045f 2766      	CLR  R22
000460 2777      	CLR  R23
000461 915f      	POP  R21
000462 9508      	RET
                 
                 __MINRES:
000463 efef      	SER  R30
000464 efff      	SER  R31
000465 e76f      	LDI  R22,0x7F
000466 ef7f      	SER  R23
000467 915f      	POP  R21
000468 9508      	RET
                 
                 __MAXRES:
000469 efef      	SER  R30
00046a efff      	SER  R31
00046b e76f      	LDI  R22,0x7F
00046c e77f      	LDI  R23,0x7F
00046d 915f      	POP  R21
00046e 9508      	RET
                 
                 __MULF12:
00046f 935f      	PUSH R21
000470 df86      	RCALL __UNPACK
000471 3870      	CPI  R23,0x80
000472 f351      	BREQ __ZERORES
000473 3890      	CPI  R25,0x80
000474 f341      	BREQ __ZERORES
000475 2401      	EOR  R0,R1
000476 9408      	SEC
000477 1f79      	ADC  R23,R25
000478 f423      	BRVC __MULF124
000479 f31c      	BRLT __ZERORES
                 __MULF125:
00047a 2000      	TST  R0
00047b f33a      	BRMI __MINRES
00047c cfec      	RJMP __MAXRES
                 __MULF124:
00047d 920f      	PUSH R0
00047e 931f      	PUSH R17
00047f 932f      	PUSH R18
000480 933f      	PUSH R19
000481 934f      	PUSH R20
000482 2711      	CLR  R17
000483 2722      	CLR  R18
000484 2799      	CLR  R25
000485 9f68      	MUL  R22,R24
000486 01a0      	MOVW R20,R0
000487 9f8f      	MUL  R24,R31
000488 2d30      	MOV  R19,R0
000489 0d41      	ADD  R20,R1
00048a 1f59      	ADC  R21,R25
00048b 9f6b      	MUL  R22,R27
00048c 0d30      	ADD  R19,R0
00048d 1d41      	ADC  R20,R1
00048e 1f59      	ADC  R21,R25
00048f 9f8e      	MUL  R24,R30
000490 d027      	RCALL __MULF126
000491 9fbf      	MUL  R27,R31
000492 d025      	RCALL __MULF126
000493 9f6a      	MUL  R22,R26
000494 d023      	RCALL __MULF126
000495 9fbe      	MUL  R27,R30
000496 d01d      	RCALL __MULF127
000497 9faf      	MUL  R26,R31
000498 d01b      	RCALL __MULF127
000499 9fae      	MUL  R26,R30
00049a 0d11      	ADD  R17,R1
00049b 1f29      	ADC  R18,R25
00049c 1f39      	ADC  R19,R25
00049d 1f49      	ADC  R20,R25
00049e 1f59      	ADC  R21,R25
00049f 2fe3      	MOV  R30,R19
0004a0 2ff4      	MOV  R31,R20
0004a1 2f65      	MOV  R22,R21
0004a2 2f52      	MOV  R21,R18
0004a3 914f      	POP  R20
0004a4 913f      	POP  R19
0004a5 912f      	POP  R18
0004a6 911f      	POP  R17
0004a7 900f      	POP  R0
0004a8 2366      	TST  R22
0004a9 f02a      	BRMI __MULF122
0004aa 0f55      	LSL  R21
0004ab 1fee      	ROL  R30
0004ac 1fff      	ROL  R31
0004ad 1f66      	ROL  R22
0004ae c002      	RJMP __MULF123
                 __MULF122:
0004af 9573      	INC  R23
0004b0 f24b      	BRVS __MULF125
                 __MULF123:
0004b1 df29      	RCALL __ROUND_REPACK
0004b2 915f      	POP  R21
0004b3 9508      	RET
                 
                 __MULF127:
0004b4 0d10      	ADD  R17,R0
0004b5 1d21      	ADC  R18,R1
0004b6 1f39      	ADC  R19,R25
0004b7 c002      	RJMP __MULF128
                 __MULF126:
0004b8 0d20      	ADD  R18,R0
0004b9 1d31      	ADC  R19,R1
                 __MULF128:
0004ba 1f49      	ADC  R20,R25
0004bb 1f59      	ADC  R21,R25
0004bc 9508      	RET
                 
                 __DIVF21:
0004bd 935f      	PUSH R21
0004be df38      	RCALL __UNPACK
0004bf 3870      	CPI  R23,0x80
0004c0 f421      	BRNE __DIVF210
0004c1 2011      	TST  R1
                 __DIVF211:
0004c2 f40a      	BRPL __DIVF219
0004c3 cf9f      	RJMP __MINRES
                 __DIVF219:
0004c4 cfa4      	RJMP __MAXRES
                 __DIVF210:
0004c5 3890      	CPI  R25,0x80
0004c6 f409      	BRNE __DIVF218
                 __DIVF217:
0004c7 cf95      	RJMP __ZERORES
                 __DIVF218:
0004c8 2401      	EOR  R0,R1
0004c9 9408      	SEC
0004ca 0b97      	SBC  R25,R23
0004cb f41b      	BRVC __DIVF216
0004cc f3d4      	BRLT __DIVF217
0004cd 2000      	TST  R0
0004ce cff3      	RJMP __DIVF211
                 __DIVF216:
0004cf 2f79      	MOV  R23,R25
0004d0 931f      	PUSH R17
0004d1 932f      	PUSH R18
0004d2 933f      	PUSH R19
0004d3 934f      	PUSH R20
0004d4 2411      	CLR  R1
0004d5 2711      	CLR  R17
0004d6 2722      	CLR  R18
0004d7 2733      	CLR  R19
0004d8 2744      	CLR  R20
0004d9 2755      	CLR  R21
0004da e290      	LDI  R25,32
                 __DIVF212:
0004db 17ae      	CP   R26,R30
0004dc 07bf      	CPC  R27,R31
0004dd 0786      	CPC  R24,R22
0004de 0741      	CPC  R20,R17
0004df f030      	BRLO __DIVF213
0004e0 1bae      	SUB  R26,R30
0004e1 0bbf      	SBC  R27,R31
0004e2 0b86      	SBC  R24,R22
0004e3 0b41      	SBC  R20,R17
0004e4 9408      	SEC
0004e5 c001      	RJMP __DIVF214
                 __DIVF213:
0004e6 9488      	CLC
                 __DIVF214:
0004e7 1f55      	ROL  R21
0004e8 1f22      	ROL  R18
0004e9 1f33      	ROL  R19
0004ea 1c11      	ROL  R1
0004eb 1faa      	ROL  R26
0004ec 1fbb      	ROL  R27
0004ed 1f88      	ROL  R24
0004ee 1f44      	ROL  R20
0004ef 959a      	DEC  R25
0004f0 f751      	BRNE __DIVF212
0004f1 01f9      	MOVW R30,R18
0004f2 2d61      	MOV  R22,R1
0004f3 914f      	POP  R20
0004f4 913f      	POP  R19
0004f5 912f      	POP  R18
0004f6 911f      	POP  R17
0004f7 2366      	TST  R22
0004f8 f032      	BRMI __DIVF215
0004f9 0f55      	LSL  R21
0004fa 1fee      	ROL  R30
0004fb 1fff      	ROL  R31
0004fc 1f66      	ROL  R22
0004fd 957a      	DEC  R23
0004fe f243      	BRVS __DIVF217
                 __DIVF215:
0004ff dedb      	RCALL __ROUND_REPACK
000500 915f      	POP  R21
000501 9508      	RET
                 
                 __ADDW2R15:
000502 2400      	CLR  R0
000503 0daf      	ADD  R26,R15
000504 1db0      	ADC  R27,R0
000505 9508      	RET
                 
                 __ANEGW1:
000506 95f1      	NEG  R31
000507 95e1      	NEG  R30
000508 40f0      	SBCI R31,0
000509 9508      	RET
                 
                 __ANEGD1:
00050a 95f0      	COM  R31
00050b 9560      	COM  R22
00050c 9570      	COM  R23
00050d 95e1      	NEG  R30
00050e 4fff      	SBCI R31,-1
00050f 4f6f      	SBCI R22,-1
000510 4f7f      	SBCI R23,-1
000511 9508      	RET
                 
                 __CWD1:
000512 2f6f      	MOV  R22,R31
000513 0f66      	ADD  R22,R22
000514 0b66      	SBC  R22,R22
000515 2f76      	MOV  R23,R22
000516 9508      	RET
                 
                 __GETW1P:
000517 91ed      	LD   R30,X+
000518 91fc      	LD   R31,X
000519 9711      	SBIW R26,1
00051a 9508      	RET
                 
                 __GETW1PF:
00051b 9005      	LPM  R0,Z+
00051c 91f4      	LPM  R31,Z
00051d 2de0      	MOV  R30,R0
00051e 9508      	RET
                 
                 __GETD1S0:
00051f 81e8      	LD   R30,Y
000520 81f9      	LDD  R31,Y+1
000521 816a      	LDD  R22,Y+2
000522 817b      	LDD  R23,Y+3
000523 9508      	RET
                 
                 __PUTPARD1:
000524 937a      	ST   -Y,R23
000525 936a      	ST   -Y,R22
000526 93fa      	ST   -Y,R31
000527 93ea      	ST   -Y,R30
000528 9508      	RET
                 
                 __PUTPARD2:
000529 939a      	ST   -Y,R25
00052a 938a      	ST   -Y,R24
00052b 93ba      	ST   -Y,R27
00052c 93aa      	ST   -Y,R26
00052d 9508      	RET
                 
                 __SAVELOCR6:
00052e 935a      	ST   -Y,R21
                 __SAVELOCR5:
00052f 934a      	ST   -Y,R20
                 __SAVELOCR4:
000530 933a      	ST   -Y,R19
                 __SAVELOCR3:
000531 932a      	ST   -Y,R18
                 __SAVELOCR2:
000532 931a      	ST   -Y,R17
000533 930a      	ST   -Y,R16
000534 9508      	RET
                 
                 __LOADLOCR6:
000535 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000536 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000537 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000538 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000539 8119      	LDD  R17,Y+1
00053a 8108      	LD   R16,Y
00053b 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  29 r1 :  18 r2 :   0 r3 :   0 r4 :   1 r5 :   0 r6 :   4 r7 :   3 
r8 :   2 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  34 r17:  34 r18:  41 r19:  20 r20:  23 r21:  66 r22:  47 r23:  40 
r24:  37 r25:  31 r26: 114 r27:  51 r28:  15 r29:   1 r30: 227 r31:  86 
x  :  23 y  : 180 z  :  15 
Registers used: 27 out of 35 (77.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :   9 
adiw  :  26 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  23 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  12 
brlt  :   4 brmi  :   6 brne  :  38 brpl  :   6 brsh  :   3 brtc  :   1 
brts  :   1 brvc  :   2 brvs  :   3 bset  :   0 bst   :   0 call  :  66 
cbi   :   7 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  26 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   6 cpc   :   5 cpi   :  44 cpse  :   0 dec   :  10 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   4 jmp   :  24 ld    :  27 ldd   :  82 ldi   : 125 
lds   :   8 lpm   :  14 lsl   :  10 lsr   :   1 mov   :  36 movw  :  19 
mul   :  10 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   8 out   :  44 pop   :  17 push  :  16 rcall :  29 ret   :  40 
reti  :   0 rjmp  :  82 rol   :  22 ror   :   7 sbc   :   6 sbci  :   7 
sbi   :   8 sbic  :   0 sbis  :   1 sbiw  :  23 sbr   :   0 sbrc  :   2 
sbrs  :  11 sec   :   3 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  66 std   :  31 sts   :   6 sub   :   3 subi  :  17 swap  :   1 
tst   :  16 wdr   :   1 
Instructions used: 73 out of 116 (62.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a78   2574    106   2680   16384  16.4%
[.dseg] 0x000060 0x00019e      0     62     62    1024   6.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
